@page "/Salidas/SalidasList"
@inject SalidaService salidaService
@inject NavigationManager Navigation
@using System.ComponentModel.DataAnnotations
@inject IJSRuntime JS

<h3 class="text-center mt-4">Listado de Salidas</h3>

@if (salidas is null)
{
    <p class="text-center">Cargando salidas...</p>
}
else if (!salidas.Any())
{
    <p class="text-center text-muted">No hay salidas registradas.</p>
}
else
{
    <table class="table table-bordered table-striped mt-4">
        <thead class="table-dark">
            <tr>
                <th>Fecha</th>
                <th>Producto</th>
                <th>Cantidad</th>
                <th>Usuario</th>
                <th>Acciones</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var salida in salidas)
            {
                <tr>
                    <td>@salida.Fecha.ToString("dd/MM/yyyy")</td>
                    <td>@salida.Productos?.Nombre</td>
                    <td>@salida.Cantidad</td>
                    <td>@salida.Usuario?.Nombre</td>
                    <td>
                        <button class="btn btn-sm btn-danger" @onclick="() => EliminarSalida(salida.Id)">Eliminar</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

<button class="btn btn-primary mt-3" @onclick="NuevaSalida">Registrar Nueva Salida</button>

@code {
    private List<SalidaProductos> salidas;

    protected override async Task OnInitializedAsync()
    {
        salidas = await salidaService.ObtenerTodasAsync();
    }

    private void NuevaSalida()
    {
        Navigation.NavigateTo("/Salidas/SalidaForm");
    }

    private async Task EliminarSalida(int id)
    {
        bool confirmado = await JS.InvokeAsync<bool>("confirm", "¿Estás seguro de eliminar esta salida?");
        if (confirmado)
        {
            await salidaService.EliminarAsync(id);
            salidas = await salidaService.ObtenerTodasAsync();
        }
    }
}
